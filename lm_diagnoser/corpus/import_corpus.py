import pickle
from typing import Any, Dict, List, Tuple

from typedefs import LabeledCorpus, LabeledSentence


def convert_to_labeled_corpus(corpus_path: str) -> LabeledCorpus:
    labeled_corpus = {}

    with open(corpus_path, 'rb') as f:
        corpus: Dict[int, Dict[str, Any]] = pickle.load(f)

    for key, item in corpus.items():
        assert 'sen' in item.keys() and 'labels' in item.keys(), 'Corpus item has wrong format.'

        sen = item['sen']
        labels = item['labels']
        misc_info = {k: v for k, v in item.items() if k not in ['sen', 'labels']}
        labeled_sentence = LabeledSentence(sen, labels, misc_info)
        labeled_sentence.validate()
        labeled_corpus[key] = labeled_sentence

    return labeled_corpus


def read_gulordava_corpus(corpus_dir: str) -> Tuple[LabeledCorpus, LabeledCorpus]:
    """
    Read the corpus generated by [1] with 41 sentences, of which all content words were randomly replaced with another
    word of the same form nine time, resulting in 410 sentences in total.

    [1] https://arxiv.org/pdf/1803.11138.pdf
    """
    def _read_file(path: str) -> List[str]:
        with open(path, "r") as f:
            return f.readlines()

    sentences = _read_file(f"{corpus_dir}/generated.text")
    sentence_info = _read_file(f"{corpus_dir}/generated.tab")[1:]  # Skip header line
    labelled_original_corpus = {}
    labelled_nonce_corpus = {}

    for i, sentence in enumerate(sentences):
        right_info, wrong_info = sentence_info[2*i], sentence_info[2*i+1]

        # Parse lines
        # TODO: Find better way to do this
        _, constr_id, sent_id, correct_number, right_form, _, type_, _, _, _, _, len_context, len_prefix, sent = right_info.split("\t")
        _, constr_id_wrong, sent_id_wrong, _, wrong_form, _, type_wrong, _, _, _, _, _, _, sent_wrong = wrong_info.split("\t")

        assert constr_id == constr_id_wrong and sent_id == sent_id_wrong and sent == sent_wrong and type_ == type_wrong

        sentence_id = f"{constr_id}/{sent_id}"
        len_prefix, len_context = int(len_prefix), int(len_context)
        subj_pos = len_prefix - len_context
        verb_pos = len_prefix
        sentence = sent.split()

        misc_info = {
            "raw": sent,
            "subj_pos": subj_pos,
            "verb_pos": verb_pos,
            "right_form": right_form,
            "wrong_form": wrong_form,
            "correct_number": correct_number,
            "sent_id": sent_id,
            "constr_id": constr_id
        }

        labelled_sentence = LabeledSentence(
            sentence, labels=[0 if correct_number == "sing" else 1] * len(sentence), misc_info=misc_info
        )
        labelled_sentence.validate()

        if type_ == "generated":
            labelled_nonce_corpus[sentence_id] = labelled_sentence
        elif type_ == "original":
            labelled_original_corpus[i] = labelled_sentence

    return labelled_original_corpus, labelled_nonce_corpus
